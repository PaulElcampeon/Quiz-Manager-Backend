{"version":3,"sources":["serviceWorker.js","store/actions/index.js","store/reducers/loggedInReducer.js","store/reducers/messageReducer.js","store/reducers/tokenReducer.js","store/reducers/quizReducer.js","store/reducers/loggingInReducer.js","store/reducers/rootReducer.js","comms/commsService.js","utils/loginPreVerification.js","utils/sessionManager.js","store/middleware/loginMiddleware.js","store/middleware/logoutMiddleware.js","store/middleware/quizMiddleware.js","store/index.js","components/items/QuizListItem.js","components/items/QuizAnswer.js","components/items/QuizQuestion.js","components/items/QuizItem.js","components/views/Quizzes.js","components/items/LoginForm.js","components/views/Login.js","components/items/CreateAnswer.js","components/items/CreateQuestion.js","components/views/Create.js","components/items/NavbarItem.js","components/items/Navbar.js","components/items/ProtectedRoute.js","components/items/Message.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","loggedInAction","loggedIn","type","updateToken","token","getQuizzes","updateAllQuizzesInStore","quizzes","updateMessage","message","loggedInReducer","state","action","messageReducer","tokenReducer","permLv","quizReducer","quiz","map","element","quizTitle","concat","filter","quizId","loggingInReducer","logginIn","rootReducer","combineReducers","loggingIn","createQuiz","fetch","method","body","JSON","stringify","headers","verify","username","password","length","SessionManager","storeUserData","userData","sessionStorage","setItem","getUserData","parse","getItem","removeUserData","removeItem","loginMiddleware","next","credentialsChecker","credential","then","res","json","data","status","store","dispatch","jwt","restrictionLevel","catch","error","console","log","authenticating","logoutMiddleware","quizMiddleware","undefined","deleteQuiz","quizIdWithToken","quizWithToken","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","QuizListItem","props","onClick","className","QuizAnswer","answer","isAnswer","editeModeEnabled","onRemove","onChange","index","useSelector","useState","currentAnswer","setAnswer","currentIsAnswer","setIsAnswer","shouldShowAnswer","handleChange","e","target","value","handleChecked","checked","readOnly","QuizQuestion","question","answers","updateQuiz","removeQuizQuestion","currentAnswers","setAnswers","removeAnswer","indexOfAnswer","newAnswers","modifyAnswer","placeholder","key","QuizItem","quizItem","onClose","questions","useDispatch","setEditMode","updatedQuestions","setQuestions","close","quizQuestion","indexOfQuestion","newUpdatedQuestions","newUpdateQuestions","Quizzes","showQuizItem","setShowQuizItem","setQuizItem","LoginForm","setUsername","setPassword","to","pathname","from","Login","CreateAnswer","onUpdateAnswer","updateIsAnswer","tempIsAnswer","CreateQuestion","updateQuestion","removeQuestion","updatedQuestion","setQuestion","updatedAnswers","newUpdatedAnswers","forEach","onChangeAnswer","newQuestion","Create","title","updateTitle","updateQuestions","questionIndex","newQuizQuestions","updatedQuizQuestions","history","push","NavbarItem","requiresLoggedIn","permission","useHistory","storeExtractor","shouldShow","preventDefault","activeClassName","sections","directorty","Navbar","ProtectedRoute","Component","component","rest","render","Message","App","useEffect","exact","path","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c15a7ce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const LOGIN = 'LOGIN'; //should be a middleware\r\nexport const LOGOUT = 'LOGOUT';//should be a middleware\r\nexport const LOGGED_IN = 'LOGGED_IN';\r\nexport const LOGGING_IN = 'LOGGING_IN';\r\n\r\nexport const AUTHENTICATE_TOKEN = 'AUTHENTICATE_TOKEN';\r\nexport const UPDATE_TOKEN = 'UPDATE_TOKEN';\r\n\r\nexport const UPDATE_MESSAGE = 'UPDATE_MESSAGE';\r\n\r\nexport const GET_QUIZZES = 'GET_QUIZZES';\r\nexport const CREATE_QUIZ = 'CREATE_QUIZ';\r\nexport const UPDATE_QUIZ = 'UPDATE_QUIZ';\r\nexport const UPDATE_ONE_QUIZ_IN_STORE = 'UPDATE_ONE_QUIZ_IN_STORE';\r\nexport const UPDATE_ALL_QUIZZES_IN_STORE = 'UPDATE_ALL_QUIZ_IN_STORE';\r\nexport const DELETE_QUIZ = 'DELETE_QUIZ';\r\nexport const DELETE_QUIZ_IN_STORE = 'DELETE_QUIZ_IN_STORE';\r\nexport const ADD_QUIZ_IN_STORE = 'ADD_QUIZ_IN_STORE';\r\n\r\nexport const loginAction = (credential) => {\r\n    return {\r\n        type: LOGIN,\r\n        credential: credential\r\n    }\r\n}\r\n\r\nexport const authenticateToken = (token) => {\r\n    return {\r\n        type: AUTHENTICATE_TOKEN,\r\n        token: token\r\n    }\r\n}\r\n\r\n\r\nexport const loggingIn = () => {\r\n    return {\r\n        type: LOGGING_IN,\r\n        loggingIn: true\r\n    }\r\n}\r\n\r\nexport const logoutAction = () => {\r\n    return {\r\n        type: LOGOUT\r\n    }\r\n}\r\n\r\nexport const loggedInAction = (loggedIn) => {\r\n    return {\r\n        type: LOGGED_IN,\r\n        loggedIn: loggedIn\r\n    }\r\n}\r\n\r\nexport const updateToken = (token) => {\r\n    return {\r\n        type: UPDATE_TOKEN,\r\n        token: token\r\n    }\r\n}\r\n\r\nexport const getQuizzes = (token) => {\r\n    return {\r\n        type: GET_QUIZZES,\r\n        token: token\r\n    }\r\n}\r\n\r\nexport const addQuizInStore = (quiz) => {\r\n    return {\r\n        type: ADD_QUIZ_IN_STORE,\r\n        quiz: quiz\r\n    }\r\n}\r\n\r\nexport const updateQuizInDB = (quizWithToken) => {\r\n    return {\r\n        type: UPDATE_QUIZ,\r\n        quizWithToken: quizWithToken\r\n    }\r\n}\r\n\r\nexport const createQuiz = (quizWithToken) => {\r\n    return {\r\n        type: CREATE_QUIZ,\r\n        quizWithToken: quizWithToken\r\n    }\r\n}\r\n\r\nexport const deleteQuiz = (quizIdWithToken) => {\r\n    return {\r\n        type: DELETE_QUIZ,\r\n        quizIdWithToken: quizIdWithToken\r\n    }\r\n}\r\nexport const deleteQuizInStore = (quizId) => {\r\n    return {\r\n        type: DELETE_QUIZ_IN_STORE,\r\n        quizId: quizId\r\n    }\r\n}\r\n\r\nexport const updateOneQuizInStore = (quiz) => {\r\n    return {\r\n        type: UPDATE_ONE_QUIZ_IN_STORE,\r\n        quiz: quiz\r\n    }\r\n}\r\n\r\nexport const updateAllQuizzesInStore = (quizzes) => {\r\n    return {\r\n        type: UPDATE_ALL_QUIZZES_IN_STORE,\r\n        quizzes: quizzes\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport const updateMessage = (message) => {\r\n    return {\r\n        type: UPDATE_MESSAGE,\r\n        message: message\r\n    }\r\n}","import { LOGGED_IN } from '../actions';\r\n\r\nconst loggedInReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case LOGGED_IN:\r\n            return action.loggedIn\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default loggedInReducer;","import { UPDATE_MESSAGE } from \"../actions\"\r\n\r\nconst messageReducer = (state = null, action) => {\r\n    switch(action.type) {\r\n        case UPDATE_MESSAGE: \r\n            return action.message;\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport default messageReducer;","import { UPDATE_TOKEN } from '../actions';\r\n\r\nconst tokenReducer = (state = {token:null, permLv:1}, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_TOKEN:\r\n            return action.token\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default tokenReducer;","import { UPDATE_ALL_QUIZZES_IN_STORE, UPDATE_ONE_QUIZ_IN_STORE, ADD_QUIZ_IN_STORE, DELETE_QUIZ_IN_STORE } from \"../actions\"\r\n\r\nconst quizReducer = (state = [], action) => {\r\n    switch (action.type) {\r\n        case UPDATE_ALL_QUIZZES_IN_STORE:\r\n            return action.quizzes;\r\n        case UPDATE_ONE_QUIZ_IN_STORE:\r\n            const quiz = action.quiz;\r\n            return state.map(element => {\r\n                if (element.quizTitle === quiz.quizTitle) return quiz;\r\n                return element;\r\n            })\r\n        case ADD_QUIZ_IN_STORE:\r\n            return state.concat(action.quiz);\r\n        case DELETE_QUIZ_IN_STORE:\r\n            return state.filter(element => action.quizId !== element.quizTitle);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default quizReducer;","import { LOGGING_IN } from '../actions';\r\n\r\nconst loggingInReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case LOGGING_IN:\r\n            return action.logginIn\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default loggingInReducer;","import { combineReducers } from 'redux';\r\nimport loggedInReducer from './loggedInReducer';\r\nimport messageReducer from './messageReducer';\r\nimport tokenReducer from './tokenReducer';\r\nimport quizReducer from './quizReducer';\r\nimport loggingInReducer from './loggingInReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    loggingIn: loggingInReducer,\r\n    quizzes: quizReducer,\r\n    loggedIn: loggedInReducer,\r\n    message: messageReducer,\r\n    token: tokenReducer\r\n})\r\n\r\nexport default rootReducer;","export const addQuiz = (quiz, token) => {\r\n    return fetch('/quiz/add', {\r\n        method: 'post',\r\n        body: JSON.stringify(quiz),\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nexport const aunthticateTokenRequest = (token) => {\r\n    return fetch('/user/token/authenticate', {\r\n        method: 'post',\r\n        body: JSON.stringify({authenticating: true}),\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nexport const getQuizzes = (token) => {\r\n    return fetch('/quiz/get', {\r\n        method: 'get',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nexport const updateQuiz = (quiz, token) => {\r\n    return fetch('/quiz/update', {\r\n        method: 'put',\r\n        body: JSON.stringify(quiz),\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nexport const createQuiz = (quiz, token) => {\r\n    return fetch('/quiz/create', {\r\n        method: 'post',\r\n        body: JSON.stringify(quiz),\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nexport const deleteQuiz = (quizId, token) => {\r\n    return fetch('/quiz/delete', {\r\n        method: 'delete',\r\n        body: JSON.stringify({quizId:quizId}),\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nexport const attemptLogin = (credential) => {\r\n    return fetch('/user/authenticate', {\r\n        method: 'post',\r\n        body: JSON.stringify(credential),\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}","const verify = ({username, password}) => {\r\n    const valid = username.length > 0 && password.length > 0\r\n    return valid;\r\n}\r\n\r\nexport default verify;","class SessionManager {\r\n\r\n    static storeUserData = (userData) => {\r\n        sessionStorage.setItem('quiz-manager', JSON.stringify(userData));\r\n    }\r\n\r\n    static getUserData = () => {\r\n        return JSON.parse(sessionStorage.getItem('quiz-manager'));\r\n    }\r\n\r\n    static removeUserData = () => {\r\n        sessionStorage.removeItem('quiz-manager');\r\n    }\r\n}\r\n\r\nexport default SessionManager;","import { LOGIN, AUTHENTICATE_TOKEN, updateMessage, updateToken, loggedInAction, getQuizzes } from '../actions/index';\r\nimport { attemptLogin, aunthticateTokenRequest } from '../../comms/commsService'\r\nimport credentialsChecker from '../../utils/loginPreVerification';\r\nimport SessionManager from '../../utils/sessionManager';\r\nimport store from '../index';\r\n\r\nexport const loginMiddleware = (state) => (next) => (action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            if (credentialsChecker(action.credential)) {\r\n                attemptLogin(action.credential)\r\n                    .then(res => res.json())\r\n                    .then(data => {\r\n                        if (data.status && data.status !== 202) {\r\n                            store.dispatch(updateMessage(\"Your password  or username was incorrect\"))\r\n                        } else {\r\n                            store.dispatch(getQuizzes(data.jwt))\r\n                            SessionManager.storeUserData({ token: data.jwt, permLv: data.restrictionLevel });\r\n                            store.dispatch(updateToken({ token: data.jwt, permLv: data.restrictionLevel }));\r\n                            store.dispatch(loggedInAction(true));\r\n                            store.dispatch(updateMessage(null))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error.message)\r\n                        store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                    })\r\n            } else {\r\n                store.dispatch(updateMessage(\"Credentials are not valid\"))\r\n            }\r\n            break;\r\n        case AUTHENTICATE_TOKEN:\r\n            aunthticateTokenRequest(action.token)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.status && data.status !== 202) {\r\n                        store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                    } else {\r\n                        if (SessionManager.getUserData()) {\r\n                            store.dispatch(getQuizzes(SessionManager.getUserData().token));\r\n                            store.dispatch(updateToken({ token: SessionManager.getUserData().token, permLv: SessionManager.getUserData().permLv }));\r\n                            store.dispatch(loggedInAction(true));\r\n                            store.dispatch(updateMessage(null))\r\n                        }\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.message)\r\n                    store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                })\r\n            break;\r\n        default:\r\n            next(action);\r\n    }\r\n}\r\n\r\nexport default loginMiddleware;","import { LOGOUT, updateMessage, updateToken, loggedInAction } from '../actions/index';\r\nimport SessionManager from '../../utils/sessionManager';\r\nimport store from '../index';\r\n\r\nexport const logoutMiddleware = (state) => (next) => (action) => {\r\n    switch (action.type) {\r\n        case LOGOUT:\r\n            store.dispatch(loggedInAction(false));\r\n            store.dispatch(updateToken({ token: null, permLv: 1 }));\r\n            SessionManager.removeUserData();\r\n            store.dispatch(updateMessage(null));\r\n            break;\r\n        default:\r\n            next(action);\r\n    }\r\n}\r\n\r\nexport default logoutMiddleware;","import {\r\n    GET_QUIZZES, DELETE_QUIZ, CREATE_QUIZ, UPDATE_QUIZ,\r\n    updateMessage, updateOneQuizInStore, updateAllQuizzesInStore,\r\n    deleteQuizInStore, addQuizInStore\r\n} from '../actions/index';\r\nimport { createQuiz, deleteQuiz, getQuizzes } from '../../comms/commsService'\r\nimport store from '../index';\r\n\r\nexport const quizMiddleware = (state) => (next) => (action) => {\r\n    switch (action.type) {\r\n        case GET_QUIZZES:\r\n            getQuizzes(action.token)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.status && data.status !== 202) {\r\n                        store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                    } else {\r\n                        if (data === undefined) {\r\n                            store.dispatch(updateAllQuizzesInStore([]));\r\n                        } else {\r\n                            store.dispatch(updateAllQuizzesInStore(data));\r\n                        }\r\n                        store.dispatch(updateMessage(null))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.message)\r\n                    store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                })\r\n            break;\r\n        case DELETE_QUIZ:\r\n            deleteQuiz(action.quizIdWithToken.quizId, action.quizIdWithToken.token)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.status && data.status !== 202) {\r\n                        store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                    } else {\r\n                        store.dispatch(deleteQuizInStore(action.quizIdWithToken.quizId));\r\n                        store.dispatch(updateMessage(null))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.message)\r\n                    store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                })\r\n            break;\r\n        case CREATE_QUIZ:\r\n            createQuiz(action.quizWithToken.quiz, action.quizWithToken.token)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.status && data.status !== 202) {\r\n                        store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                    } else {\r\n                        store.dispatch(addQuizInStore(action.quizWithToken.quiz));\r\n                        store.dispatch(updateMessage(null))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.message)\r\n                    store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                })\r\n            break;\r\n        case UPDATE_QUIZ:\r\n            createQuiz(action.quizWithToken.quiz, action.quizWithToken.token)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.status && data.status !== 202) {\r\n                        store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                    } else {\r\n                        store.dispatch(updateOneQuizInStore(action.quizWithToken.quiz));\r\n                        store.dispatch(updateMessage(null))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.message)\r\n                    store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                })\r\n            break;\r\n        default:\r\n            next(action);\r\n    }\r\n}\r\n\r\nexport default quizMiddleware;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport loginMiddleware from './middleware/loginMiddleware';\r\nimport logoutMiddleware from './middleware/logoutMiddleware';\r\nimport quizMiddleware from './middleware/quizMiddleware';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\r\n    applyMiddleware(loginMiddleware, logoutMiddleware, quizMiddleware)\r\n));\r\n\r\nexport default store;","import React from 'react';\r\n\r\nconst QuizListItem = (props) => {\r\n    const { quizTitle, onClick} = props\r\n\r\n    return (\r\n        <div className=\"quizListItem_holder\">\r\n            <button className=\"quizListBtn\" onClick={onClick}>{quizTitle}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizListItem;","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nconst QuizAnswer = (props) => {\r\n    const { answer, isAnswer, editeModeEnabled, onRemove, onChange, index } = props;\r\n\r\n    //Redux tools\r\n    const storeExtractor = useSelector(store => store);\r\n    const { permLv } = storeExtractor.token;\r\n\r\n    //Managing local component state\r\n    const [currentAnswer, setAnswer] = useState(answer);\r\n    const [currentIsAnswer, setIsAnswer] = useState(isAnswer);\r\n\r\n    const shouldShowAnswer = isAnswer && permLv >= 2;\r\n\r\n    const handleChange = (e) => {\r\n        setAnswer(e.target.value)\r\n        onChange({ answer: e.target.value, isAnswer: currentIsAnswer }, index);\r\n    }\r\n\r\n    const handleChecked = (e) => {\r\n        setIsAnswer(e.target.checked)\r\n        onChange({ answer: currentAnswer, isAnswer: e.target.checked }, index);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editeModeEnabled ?\r\n                <div className=\"quiz_answer\">\r\n                    {shouldShowAnswer ? <input className=\"input_disabled\" type=\"checkbox\" checked readOnly /> : <input type=\"checkbox\" className=\"input_disabled\" readOnly />}\r\n                    <input className=\"input_disabled answer_input\" type=\"text\" value={currentAnswer} readOnly />\r\n                </div>\r\n                :\r\n                <div className=\"quiz_answer\">\r\n                    <input type=\"checkbox\" onChange={(e) => handleChecked(e)} checked={isAnswer ? 'checked' : ''} />\r\n                    <input className=\"answer_input\" type=\"text\" value={answer} onChange={(e) => handleChange(e)} />\r\n                    <input className=\"removeBtn\" type=\"button\" value=\"REMOVE\" onClick={onRemove} />\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizAnswer","import React, { useState } from 'react';\r\nimport QuizAnswer from './QuizAnswer';\r\n\r\nconst QuizQuestion = (props) => {\r\n    const { question, answers, editeModeEnabled, updateQuiz, index, removeQuizQuestion } = props;\r\n\r\n    //Managing local component state\r\n    const [currentAnswers, setAnswers] = useState(answers);\r\n\r\n    const removeAnswer = (indexOfAnswer) => {\r\n        const newAnswers = currentAnswers.filter((element, index) => index !== indexOfAnswer);\r\n        setAnswers(newAnswers);\r\n        updateQuiz({ question: question, answers: newAnswers }, index)\r\n    }\r\n\r\n    const removeQuestion = (indexOfQuestion) => {\r\n        removeQuizQuestion(indexOfQuestion);\r\n    }\r\n\r\n    const addAnswer = () => {\r\n        const newAnswers = currentAnswers.concat({ answer: \"\", isAnswer: false });\r\n        setAnswers(newAnswers);\r\n        updateQuiz({ question: question, answers: newAnswers }, index)\r\n    }\r\n\r\n    const modifyAnswer = (answer, indexOfAnswer) => {\r\n        const newAnswers = currentAnswers.map((element, index) => {\r\n            if (index === indexOfAnswer) return answer;\r\n            return element;\r\n        });\r\n        setAnswers(newAnswers);\r\n        updateQuiz({ question: question, answers: newAnswers }, index)\r\n    }\r\n\r\n    const onQuestionChange = (e) => {\r\n        updateQuiz({ question: e.target.value, answers: currentAnswers }, index)\r\n    }\r\n\r\n    return (\r\n        <div className=\"quiz_question_holder\">\r\n            {editeModeEnabled ? <input type=\"text\" className=\"quiz_question_holder_question_input\" onChange={onQuestionChange} placeholder=\"Question\" value={question} /> : <h1 className=\"quiz_question_title\">{question}</h1>}\r\n            <div className=\"quiz_question_answers_holder\">\r\n                {currentAnswers.map((element, index) => <QuizAnswer key={index} editeModeEnabled={editeModeEnabled} index={index} {...element} onChange={modifyAnswer} onRemove={() => removeAnswer(index)} />)}\r\n            </div>\r\n            {editeModeEnabled && currentAnswers.length <= 4 ? <button className=\"quiz_question_holder_add\" onClick={addAnswer}>ADD ANSWER</button> : \"\"}\r\n            {editeModeEnabled ? <button className=\"quiz_question_holder_add\" onClick={() => removeQuestion(index)}>REMOVE QUESTION</button> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizQuestion;","import React, { useState } from 'react';\r\nimport QuizQuestion from './QuizQuestion';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateQuizInDB, deleteQuiz } from '../../store/actions'\r\n\r\nconst QuizItem = (props) => {\r\n    const { quizItem, onClose } = props;\r\n    const { quizTitle, questions } = quizItem;\r\n\r\n    //Redux tools\r\n    const dispatch = useDispatch();\r\n    const storeExtractor = useSelector(store => store);\r\n    const { token } = storeExtractor;\r\n    const permLv = token.permLv;\r\n    const jwt = token.token;\r\n\r\n    //Managing local component state\r\n    const [editeModeEnabled, setEditMode] = useState(false);\r\n    const [updatedQuestions, setQuestions] = useState(questions);\r\n\r\n    const save = () => {\r\n        quizItem.questions = updatedQuestions;\r\n        dispatch(updateQuizInDB({ quiz: quizItem, token: jwt }))\r\n        close();\r\n    }\r\n\r\n    const close = () => {\r\n        onClose()\r\n    }\r\n\r\n    const edit = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const remove = () => {\r\n        dispatch(deleteQuiz({ quizId: quizTitle, token: jwt }));\r\n        close();\r\n    }\r\n\r\n    const updateQuiz = (quizQuestion, indexOfQuestion) => {\r\n        const newUpdatedQuestions = updatedQuestions.map((element, index) => {\r\n            if (index === indexOfQuestion) return quizQuestion;\r\n            return element;\r\n        })\r\n\r\n        setQuestions(newUpdatedQuestions);\r\n    }\r\n\r\n    const removeQuizQuestion = (indexOfQuestion) => {\r\n        const newUpdateQuestions = updatedQuestions.filter((element, index) => index !== indexOfQuestion)\r\n        setQuestions(newUpdateQuestions);\r\n    }\r\n\r\n    const addQuestion = () => {\r\n        const newUpdateQuestions = updatedQuestions.concat({question:\"\", answers:[]})\r\n        setQuestions(newUpdateQuestions);\r\n    }\r\n\r\n    return (\r\n        <div className=\"quiz_item_holder\">\r\n            <div className=\"quiz_item\">\r\n                <h1 className=\"quiz_title\">{quizTitle}</h1>\r\n                <div className=\"quiz_questions_holder\">\r\n                    {updatedQuestions.map((element, index) => <QuizQuestion key={index} editeModeEnabled={editeModeEnabled} {...element} index={index} updateQuiz={updateQuiz} removeQuizQuestion={removeQuizQuestion} />)}\r\n                </div>\r\n            </div>\r\n            <div className=\"quiz_item_buttons_holder\">\r\n                {editeModeEnabled ? <button className=\"quizItemBtn\" onClick={addQuestion}>ADD QUESTION</button> : \"\"}\r\n                {permLv === 3 ? <button className=\"quizItemBtn\" onClick={edit}>EDIT</button> : \"\"}\r\n                {permLv === 3 ? <button className=\"quizItemBtn\" onClick={save}>SAVE</button> : \"\"}\r\n                {permLv === 3 ? <button className=\"quizItemBtn\" onClick={remove}>REMOVE</button> : \"\"}\r\n                <button className=\"quizItemBtn\" onClick={close}>CLOSE</button>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default QuizItem;","import React, { useState } from 'react';\r\nimport QuizListItem from '../items/QuizListItem';\r\nimport { useSelector } from 'react-redux';\r\nimport QuizItem from '../items/QuizItem';\r\n\r\nconst Quizzes = (props) => {\r\n\r\n    //Redux tools\r\n    const storeExtractor = useSelector(store => store);\r\n    const { quizzes } = storeExtractor;\r\n\r\n    //Managing local component state\r\n    const [showQuizItem, setShowQuizItem] = useState(false);\r\n    const [quizItem, setQuizItem] = useState(null);\r\n\r\n    return (\r\n        <div className=\"quizzes\">\r\n            <div className=\"quizzes_holder\">\r\n                {quizzes.map((element, index) =>\r\n                    <QuizListItem key={index} {...element}\r\n                        onClick={() => {\r\n                            setQuizItem({ quizItem: element, index: index });\r\n                            setShowQuizItem(true);\r\n                        }} />)}\r\n            </div>\r\n            {showQuizItem ? <QuizItem onClose={() => { setShowQuizItem(false) }} {...quizItem} /> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Quizzes;","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginAction } from '../../store/actions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst LoginForm = (props) => {\r\n\r\n    //Redux tools\r\n    const dispatch = useDispatch();\r\n    const storeExtractor = useSelector(store => store);\r\n    const loggedIn = storeExtractor.loggedIn;\r\n\r\n    //Managing component state\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    const handleChangeUsername = (e) => {\r\n        setUsername(e.target.value)\r\n    }\r\n\r\n    const handleChangePassword = (e) => {\r\n        setPassword(e.target.value)\r\n    }\r\n\r\n    const handleOnClick = () => {\r\n        dispatch(loginAction({ username: username, password: password }));\r\n    }\r\n\r\n    //show the spinning thing until we get from the store that we are loggedIn, if we are loggedIn then we redirect to quizzes view\r\n    return (\r\n        <div>\r\n            {loggedIn ? <Redirect to={{ pathname: \"/quizzes\", state: { from: props.location } }} />\r\n                :\r\n                <div className=\"loginForm_holder\">\r\n                    <div className=\"loginInput\">\r\n                        <input type=\"text\" placeholder=\"username\" value={username} onChange={handleChangeUsername} />\r\n                    </div>\r\n                    <div className=\"loginInput\">\r\n                        <input type=\"password\" placeholder=\"password\" value={password} onChange={handleChangePassword} />\r\n                    </div>\r\n                    <div className=\"loginBtn\">\r\n                        <input type=\"button\" value=\"login\" onClick={handleOnClick} />\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport LoginForm from '../items/LoginForm';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nconst Login = (props) => {\r\n    const storeExtractor = useSelector(store => store);\r\n    const { loggedIn } = storeExtractor;\r\n\r\n    return (\r\n        <div>\r\n            {loggedIn ? <Redirect to={\"/quizzes\"} /> :\r\n                <div className=\"login\">\r\n                    <div className=\"top_div\">\r\n                        <LoginForm />\r\n                    </div>\r\n                    <div className=\"bottom_div\">\r\n                        <h1>QUIZ MANAGER</h1>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\n\r\n\r\nconst CreateAnswer = (props) => {\r\n    const { onRemove, onUpdateAnswer, index, answer, isAnswer } = props;\r\n\r\n    //Managing local component state\r\n    const [currentIsAnswer, updateIsAnswer] = useState(isAnswer);\r\n\r\n    return (\r\n        <div className=\"create-answer-section\">\r\n            <input type=\"checkbox\" onChange={(e) => {\r\n                const tempIsAnswer = !currentIsAnswer\r\n                updateIsAnswer(tempIsAnswer);\r\n                onUpdateAnswer({ answer: answer, isAnswer: tempIsAnswer }, index);\r\n            }} checked={currentIsAnswer ? 'checked' : ''} />\r\n\r\n            <input className=\"create-answer-input\" type=\"text\" value={answer} onChange={(e) => {\r\n                onUpdateAnswer({ answer: e.target.value, isAnswer: currentIsAnswer }, index)\r\n            }} />\r\n            <input className=\"create-remove-answer\" type=\"button\" value=\"REMOVE\" onClick={() => onRemove(index)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateAnswer;","import React, { useState } from 'react';\r\nimport CreateAnswer from './CreateAnswer';\r\n\r\nconst CreateQuestion = (props) => {\r\n    const { question, answers, index, updateQuestion, removeQuestion } = props;\r\n\r\n    //Managing local component state\r\n    const [updatedQuestion, setQuestion] = useState(question);\r\n    const [updatedAnswers, setAnswers] = useState(answers);\r\n\r\n    const handleChange = (e) => {\r\n        const newQuestion = e.target.value;\r\n        setQuestion(newQuestion);\r\n        updateQuestion({ question: newQuestion, answers: updatedAnswers }, index);\r\n    }\r\n\r\n    const addAnswer = () => {\r\n        if (updatedAnswers.length > 4) return;\r\n        const newUpdatedAnswers = updatedAnswers.concat({ answer: \"\", isAnswer: false });\r\n        setAnswers(newUpdatedAnswers);\r\n        updateQuestion({ question: updatedQuestion, answers: newUpdatedAnswers }, index);\r\n    }\r\n\r\n    const removeAnswer = (indexOfAnswer) => {\r\n        const newUpdatedAnswers = updatedAnswers.filter((element, index) => index !== indexOfAnswer);\r\n        newUpdatedAnswers.forEach(element => console.log(element));\r\n        setAnswers(newUpdatedAnswers);\r\n        updateQuestion({ question: updatedQuestion, answers: newUpdatedAnswers }, index);\r\n    }\r\n\r\n    const onChangeAnswer = (answer, indexOfAnswer) => {\r\n        const newUpdatedAnswers = updatedAnswers.map((element, index) => {\r\n            if (index === indexOfAnswer) return answer;\r\n            return element;\r\n        });\r\n\r\n        setAnswers(newUpdatedAnswers);\r\n        updateQuestion({ question: updatedQuestion, answers: newUpdatedAnswers }, index);\r\n    }\r\n\r\n    return (\r\n        <div className=\"create-question-holder\">\r\n            <input className=\"answer_input\" type=\"text\" value={question} placeholder=\"Quiz Question\" onChange={(e) => handleChange(e)} />\r\n            {answers.map((element, index) => <CreateAnswer key={index} index={index} onUpdateAnswer={onChangeAnswer} onRemove={removeAnswer} {...element} />)}\r\n            <button className=\"create-add-answer\" onClick={addAnswer}>ADD ANSWER</button>\r\n            <button className=\"create-add-answer\" onClick={() => removeQuestion(index)}>REMOVE QUESTION</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateQuestion;","import React, { useState } from 'react';\r\nimport CreateQuestion from '../items/CreateQuestion';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { createQuiz } from '../../store/actions';\r\n\r\nconst Create = (props) => {\r\n\r\n    //Redux tools\r\n    const dispatch = useDispatch();\r\n    const storeExtractor = useSelector(store => store);\r\n    const { token } = storeExtractor;\r\n\r\n    //Managing local component state\r\n    const [quiz, updateQuiz] = useState({ title: \"\", questions: [] });\r\n    const [title, updateTitle] = useState(\"\");\r\n    const [questions, updateQuestions] = useState([]);\r\n\r\n    const handleOnAdd = () => {\r\n        const updatedQuizQuestions = questions.concat({ question: \"\", answers: [] })\r\n        updateQuestions(updatedQuizQuestions);\r\n        quiz.questions = updatedQuizQuestions;\r\n        updateQuiz(quiz);\r\n    }\r\n\r\n    const handleOnChange = (e) => {\r\n        updateTitle(e.target.value);\r\n        quiz.title = e.target.value;\r\n        updateQuiz(quiz);\r\n    }\r\n\r\n    const updateQuestion = (question, questionIndex) => {\r\n        const updatedQuestions = quiz.questions.map((element, index) => {\r\n            if (index === questionIndex) return question;\r\n            return element\r\n        })\r\n\r\n        updateQuestions(updatedQuestions);\r\n        quiz.questions = updatedQuestions;\r\n        updateQuiz(quiz);\r\n    }\r\n\r\n    const removeQuestion = (questionIndex) => {\r\n        const newQuizQuestions = questions.filter((element, index) => index !== questionIndex);\r\n        quiz.questions = newQuizQuestions;\r\n        updateQuestions(newQuizQuestions);\r\n        updateQuiz(quiz);\r\n    }\r\n\r\n    const saveQuiz = () => {\r\n        dispatch(createQuiz({ quiz: { quizTitle: title, questions: questions }, token: token.token }))\r\n        props.history.push(\"/quizzes\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"create-view-holder\">\r\n            <input className=\"create-title\" type=\"text\" value={title} placeholder=\"Quiz Title\" onChange={handleOnChange} />\r\n            <div className=\"create-questions-holder\">\r\n                {questions.length > 0 ? questions.map((element, index) => <CreateQuestion key={index} index={index} removeQuestion={removeQuestion} updateQuestion={updateQuestion} {...element} />) : \"\"}\r\n            </div>\r\n            <div className=\"create-button-holder\">\r\n                <button className=\"create-button\" onClick={handleOnAdd}>ADD QUESTION</button>\r\n            </div>\r\n            <div className=\"create-button-holder\">\r\n                <button className=\"create-button\" onClick={saveQuiz}>SAVE</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Create;","import React from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport { logoutAction } from '../../store/actions';\r\n\r\nconst NavbarItem = (props) => {\r\n    const { requiresLoggedIn, permission, to, title } = props;\r\n\r\n    //History tools\r\n    const history = useHistory();\r\n\r\n    //Redux tools\r\n    const dispatch = useDispatch();\r\n    const storeExtractor = useSelector(store => store);\r\n    const { loggedIn, token } = storeExtractor;\r\n\r\n    var shouldShow = (token.permLv >= permission) && (requiresLoggedIn === loggedIn || requiresLoggedIn === false)\r\n\r\n    if (title === \"LOGIN\" && loggedIn) shouldShow = false;\r\n\r\n    const handleOnClick = (e) => {\r\n        if (title === \"LOGOUT\") {\r\n            e.preventDefault();\r\n            dispatch(logoutAction());\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={shouldShow ? \"custom_button_holder\" : \"\"}>\r\n            {shouldShow ? <NavLink onClick={handleOnClick} activeClassName=\"nav_link_active\" className=\"custom_button\" to={`/${to}`}>{title}</NavLink> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavbarItem;","import React from 'react';\r\nimport NavbarItem from \"./NavbarItem\";\r\n\r\nconst sections = [\r\n    { directorty: \"Login\", to: \"\", title: \"LOGIN\", requiresLoggedIn: false, permission: 1 },\r\n    { directorty: \"Quizzes\", to: \"quizzes\", title: \"QUIZZES\", requiresLoggedIn: true, permission: 1 },\r\n    { directorty: \"Create\", to: \"create\", title: \"CREATE\", requiresLoggedIn: true, permission: 3 },\r\n    { directorty: \"Logout\", to: \"/logout\", title: \"LOGOUT\", requiresLoggedIn: true, permission: 1 }\r\n]\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <div className=\"navbar_holder\">\r\n            {sections.map((element, index) => <NavbarItem key={index} to={element.to} title={element.title} requiresLoggedIn={element.requiresLoggedIn} permission={element.permission} />)}\r\n    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nexport const ProtectedRoute = ({ component: Component, ...rest }) => {\r\n    \r\n    //Redux tools\r\n    const storeExtractor = useSelector(state => state);\r\n    const { token } = storeExtractor;\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={\r\n                (props) => {\r\n                    if (token.token) {\r\n                        return <Component {...props} />\r\n                    } else {\r\n                        return <Redirect to={\r\n                            {\r\n                                pathname: \"/\",\r\n                                state: {\r\n                                    from: props.location\r\n                                }\r\n                            }\r\n                        } />\r\n                    }\r\n                }\r\n            } />\r\n    )\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateMessage } from '../../store/actions';\r\n\r\nconst Message = (props) => {\r\n    //Redux tools\r\n    const dispatch = useDispatch();\r\n    const storeExtractor = useSelector(store => store);\r\n    const { message } = storeExtractor;\r\n\r\n    const hideMessage = () => {\r\n        dispatch(updateMessage(null));\r\n    }\r\n\r\n    return (\r\n        <div className=\"message_wrapper\">\r\n            <p className=\"message_text\">{message}</p>\r\n            <button className=\"message_ok_btn\" onClick={hideMessage}>OK</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, { useEffect } from 'react';\nimport './styles/app.scss';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Quizzes from './components/views/Quizzes';\nimport Login from './components/views/Login';\nimport Create from './components/views/Create';\nimport Navbar from './components/items/Navbar';\nimport { ProtectedRoute } from './components/items/ProtectedRoute';\nimport { authenticateToken } from './store/actions';\nimport SessionManager from './utils/sessionManager';\nimport Message from './components/items/Message';\n\nconst App = (props) => {\n\n  const dispatch = useDispatch();\n  const storeExtractor = useSelector(store => store);\n  const { message } = storeExtractor;\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    if (SessionManager.getUserData()) {\n      if (SessionManager.getUserData().token) dispatch(authenticateToken(SessionManager.getUserData().token))\n    }\n  });\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route exact path={\"/login\"} component={() => {\n            return <Redirect to={\"/\"} />\n          }} />\n          <ProtectedRoute exact path=\"/quizzes\" component={Quizzes} />\n          <ProtectedRoute exact path=\"/create\" component={Create} />\n          <Route path=\"*\" component={() => \"NOT FOUND\"} />\n        </Switch>\n        {message && <Message />}\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n\n\nconst quizzes =\n  [\n    {\n      title: \"subaraus\",\n      questions:\n        [\n          {\n            question: \"What is the capital of england\",\n            answers: [{ answer: \"deee\", isAnswer: false }, { answer: \"rage\", isAnswer: false }, { answer: \"deon\", isAnswer: true }]\n          },\n          {\n            question: \"How many dogs does ben have\",\n            answers: [{ answer: \"raf\", isAnswer: true }, { answer: \"damien\", isAnswer: false }, { answer: \"damien\", isAnswer: true }]\n          },\n          {\n            question: \"What make is the gold gti\",\n            answers: [{ answer: \"dww\", isAnswer: true }, { answer: \"stimp\", isAnswer: false }, { answer: \"rebecca\", isAnswer: true }]\n          },\n          {\n            question: \"How many icecreams make a van van\",\n            answers: [{ answer: \"damien\", isAnswer: false }, { answer: \"rabbit\", isAnswer: true }, { answer: \"wow\", isAnswer: true }]\n          },\n          {\n            question: \"How many icecreams make a van van\",\n            answers: [{ answer: \"sanches\", isAnswer: false }, { answer: \"dsasd\", isAnswer: true }, { answer: \"damien\", isAnswer: true }]\n          },\n          {\n            question: \"How many icecreams make a van van\",\n            answers: [{ answer: \"jamie\", isAnswer: false }, { answer: \"lefg\", isAnswer: true }, { answer: \"kimberly\", isAnswer: true }]\n          },\n          {\n            question: \"How many icecreams make a van van\",\n            answers: [{ answer: \"jose\", isAnswer: false }, { answer: \"damien\", isAnswer: true }, { answer: \"damien\", isAnswer: true }]\n          },\n          {\n            question: \"How many icecreams make a van van\",\n            answers: [{ answer: \"damien\", isAnswer: false }, { answer: \"able\", isAnswer: true }, { answer: \"kane\", isAnswer: true }]\n          }\n        ]\n    },\n    {\n      title: \"nabura\",\n      questions:\n        [\n          {\n            question: \"What is the capital of england\",\n            answers: [{ answer: \"deee\", isAnswer: false }, { answer: \"rage\", isAnswer: false }, { answer: \"deon\", isAnswer: true }]\n          },\n          {\n            question: \"How many dogs does ben have\",\n            answers: [{ answer: \"raf\", isAnswer: true }, { answer: \"damien\", isAnswer: false }, { answer: \"damien\", isAnswer: true }]\n          },\n          {\n            question: \"What make is the gold gti\",\n            answers: [{ answer: \"dww\", isAnswer: true }, { answer: \"stimp\", isAnswer: false }, { answer: \"rebecca\", isAnswer: true }]\n          },\n          {\n            question: \"How many icecreams make a van van\",\n            answers: [{ answer: \"damien\", isAnswer: false }, { answer: \"rabbit\", isAnswer: true }, { answer: \"wow\", isAnswer: true }]\n          },\n          {\n            question: \"How many icecreams make a van van\",\n            answers: [{ answer: \"sanches\", isAnswer: false }, { answer: \"dsasd\", isAnswer: true }, { answer: \"damien\", isAnswer: true }]\n          },\n          {\n            question: \"How many icecreams make a van van\",\n            answers: [{ answer: \"jamie\", isAnswer: false }, { answer: \"lefg\", isAnswer: true }, { answer: \"kimberly\", isAnswer: true }]\n          },\n          {\n            question: \"How many icecreams make a van van\",\n            answers: [{ answer: \"jose\", isAnswer: false }, { answer: \"damien\", isAnswer: true }, { answer: \"damien\", isAnswer: true }]\n          },\n          {\n            question: \"How many icecreams make a van van\",\n            answers: [{ answer: \"damien\", isAnswer: false }, { answer: \"able\", isAnswer: true }, { answer: \"kane\", isAnswer: true }]\n          }\n        ]\n    }\n\n  ]","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss';\nimport { Provider } from 'react-redux'\nimport store from './store/index'\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}